
kernel.elf:     file format elf32-littlearm


Disassembly of section .text:

00008000 <_start>:
.equ    CPSR_IRQ_INHIBIT,       0x80
.equ    CPSR_FIQ_INHIBIT,       0x40
.equ    CPSR_THUMB,             0x20

_start:
    ldr pc, _reset_h
    8000:	e59ff018 	ldr	pc, [pc, #24]	; 8020 <_reset_h>
    ldr pc, _undefined_instruction_vector_h
    8004:	e59ff018 	ldr	pc, [pc, #24]	; 8024 <_undefined_instruction_vector_h>
    ldr pc, _software_interrupt_vector_h
    8008:	e59ff018 	ldr	pc, [pc, #24]	; 8028 <_software_interrupt_vector_h>
    ldr pc, _prefetch_abort_vector_h
    800c:	e59ff018 	ldr	pc, [pc, #24]	; 802c <_prefetch_abort_vector_h>
    ldr pc, _data_abort_vector_h
    8010:	e59ff018 	ldr	pc, [pc, #24]	; 8030 <_data_abort_vector_h>
    ldr pc, _unused_handler_h
    8014:	e59ff018 	ldr	pc, [pc, #24]	; 8034 <_unused_handler_h>
    ldr pc, _interrupt_vector_h
    8018:	e59ff018 	ldr	pc, [pc, #24]	; 8038 <_interrupt_vector_h>
    ldr pc, _fast_interrupt_vector_h
    801c:	e59ff018 	ldr	pc, [pc, #24]	; 803c <_fast_interrupt_vector_h>

00008020 <_reset_h>:
    8020:	00008040 	.word	0x00008040

00008024 <_undefined_instruction_vector_h>:
    8024:	0000808c 	.word	0x0000808c

00008028 <_software_interrupt_vector_h>:
    8028:	0000808c 	.word	0x0000808c

0000802c <_prefetch_abort_vector_h>:
    802c:	0000808c 	.word	0x0000808c

00008030 <_data_abort_vector_h>:
    8030:	0000808c 	.word	0x0000808c

00008034 <_unused_handler_h>:
    8034:	00008040 	.word	0x00008040

00008038 <_interrupt_vector_h>:
    8038:	00008118 	.word	0x00008118

0000803c <_fast_interrupt_vector_h>:
    803c:	0000808c 	.word	0x0000808c

00008040 <_reset_>:

_reset_:
    // We enter execution in supervisor mode. For more information on
    // processor modes see ARM Section A2.2 (Processor Modes)

    mov     r0, #0x8000
    8040:	e3a00902 	mov	r0, #32768	; 0x8000
    mov     r1, #0x0000
    8044:	e3a01000 	mov	r1, #0
    ldmia   r0!,{r2, r3, r4, r5, r6, r7, r8, r9}
    8048:	e8b003fc 	ldm	r0!, {r2, r3, r4, r5, r6, r7, r8, r9}
    stmia   r1!,{r2, r3, r4, r5, r6, r7, r8, r9}
    804c:	e8a103fc 	stmia	r1!, {r2, r3, r4, r5, r6, r7, r8, r9}
    ldmia   r0!,{r2, r3, r4, r5, r6, r7, r8, r9}
    8050:	e8b003fc 	ldm	r0!, {r2, r3, r4, r5, r6, r7, r8, r9}
    stmia   r1!,{r2, r3, r4, r5, r6, r7, r8, r9}
    8054:	e8a103fc 	stmia	r1!, {r2, r3, r4, r5, r6, r7, r8, r9}

    // We're going to use interrupt mode, so setup the interrupt mode
    // stack pointer which differs to the application stack pointer:
    mov r0, #(CPSR_MODE_IRQ | CPSR_IRQ_INHIBIT | CPSR_FIQ_INHIBIT )
    8058:	e3a000d2 	mov	r0, #210	; 0xd2
    msr cpsr_c, r0
    805c:	e121f000 	msr	CPSR_c, r0
    
    ldr sp, =exc_stack
    8060:	e59fdcd0 	ldr	sp, [pc, #3280]	; 8d38 <exc_stack>
    ldr r0, =STACK_SIZE_2
    8064:	e59f0cd0 	ldr	r0, [pc, #3280]	; 8d3c <exc_stack+0x4>
    add sp, sp, r0
    8068:	e08dd000 	add	sp, sp, r0

    // Switch back to supervisor mode (our application mode) and
    // set the stack pointer towards the end of RAM. Remember that the
    // stack works its way down memory, our heap will work it's way
    // up memory toward the application stack.
    mov r0, #(CPSR_MODE_SVR | CPSR_IRQ_INHIBIT | CPSR_FIQ_INHIBIT )
    806c:	e3a000d3 	mov	r0, #211	; 0xd3
    msr cpsr_c, r0
    8070:	e121f000 	msr	CPSR_c, r0
    // The c-startup function which we never return from. This function will
    // initialise the ro data section (most things that have the const
    // declaration) and initialise the bss section variables to 0 (generally
    // known as automatics). It'll then call main, which should never return.

b _stewart
    8074:	ea00004b 	b	81a8 <_stewart>
    bl      _cstartup
    8078:	eb000004 	bl	8090 <_cstartup>

0000807c <_inf_loop>:

    // If main does return for some reason, just catch it and stay here.
_inf_loop:
    b       _inf_loop
    807c:	eafffffe 	b	807c <_inf_loop>

00008080 <_get_stack_pointer>:


_get_stack_pointer:
    // Return the stack pointer value
    str     sp, [sp]
    8080:	e58dd000 	str	sp, [sp]
    ldr     r0, [sp]
    8084:	e59d0000 	ldr	r0, [sp]

    // Return from the function
    mov     pc, lr
    8088:	e1a0f00e 	mov	pc, lr

0000808c <data_abort_vector>:
 software_interrupt_vector:
 prefetch_abort_vector:
 data_abort_vector:
 unused_handler:
 fast_interrupt_vector:
    subs pc,lr,#4   @ do nothing and return
    808c:	e25ef004 	subs	pc, lr, #4

00008090 <_cstartup>:
@--------------------------------- end of the interrupt handlers ------
 
 _cstartup:
    ldr sp, =exc_stack
    8090:	e59fdca0 	ldr	sp, [pc, #3232]	; 8d38 <exc_stack>
    ldr r0, =STACK_SIZE
    8094:	e59f0ca4 	ldr	r0, [pc, #3236]	; 8d40 <exc_stack+0x8>
    add sp, sp, r0
    8098:	e08dd000 	add	sp, sp, r0
    
push   {r11, lr}    /* Start of the prologue. Saving Frame Pointer and LR onto the stack */
    809c:	e92d4800 	push	{fp, lr}
add    r11, sp, #0  /* Setting up the bottom of the stack frame */
    80a0:	e28db000 	add	fp, sp, #0
sub    sp, sp, #16  /* End of the prologue. Allocating some buffer on the stack */
    80a4:	e24dd010 	sub	sp, sp, #16

 
/* setup gpio pin 21 to blink LED */
mov r0, #21
    80a8:	e3a00015 	mov	r0, #21
ldr r1, =FSEL_PIN_AS_OUTPUT
    80ac:	e59f1c90 	ldr	r1, [pc, #3216]	; 8d44 <exc_stack+0xc>
bl      set_GPFSEL
    80b0:	eb000079 	bl	829c <set_GPFSEL>

mov r0, #21
    80b4:	e3a00015 	mov	r0, #21
ldr r1, =GPSET0
    80b8:	e59f1c88 	ldr	r1, [pc, #3208]	; 8d48 <exc_stack+0x10>
bl      set_GPSET
    80bc:	eb000098 	bl	8324 <set_GPSET>

 
 /* Enable the timer interrupt IRQ */
 mov r0, #PERIPHERAL_BASE
    80c0:	e3a0043f 	mov	r0, #1056964608	; 0x3f000000
 mov r1, #RPI_INTERRUPT_CONTROLLER_BASE
    80c4:	e3a01cb2 	mov	r1, #45568	; 0xb200
 mov r2, #RPI_INTERRUPT_CONTROLLER_BASE_Enable_basic_IRQs
    80c8:	e3a02018 	mov	r2, #24
 add r1, r1, r2
    80cc:	e0811002 	add	r1, r1, r2
 mov r2, #RPI_BASIC_ARM_TIMER_IRQ
    80d0:	e3a02001 	mov	r2, #1
 str r2, [r0,r1]                    @ write the eanble flag to the timer register
    80d4:	e7802001 	str	r2, [r0, r1]
 
 /* set the timer frequency to = Clk/256 = 0x400 */
 mov r2, #TIMER_FREQUENCY
    80d8:	e3a02b01 	mov	r2, #1024	; 0x400
 mov r1, #RPI_ARMTIMER_BASE
    80dc:	e3a01b2d 	mov	r1, #46080	; 0xb400
 str r2, [r0,r1]                    @ write frequency to timer load register
    80e0:	e7802001 	str	r2, [r0, r1]
 
 /* set the ARM timer flags */
 mov r1, #RPI_ARMTIMER_CONTROL_OFFSET
    80e4:	e3a01008 	mov	r1, #8
 mov r2,#0
    80e8:	e3a02000 	mov	r2, #0
 mov r3,#RPI_ARMTIMER_CTRL_23BIT
    80ec:	e3a03002 	mov	r3, #2
 and r2,r2,r3
    80f0:	e0022003 	and	r2, r2, r3
 mov r3,#RPI_ARMTIMER_CTRL_ENABLE
    80f4:	e3a03080 	mov	r3, #128	; 0x80
 and r2,r2,r3
    80f8:	e0022003 	and	r2, r2, r3
 mov r3,#RPI_ARMTIMER_CTRL_INT_ENABLE
    80fc:	e3a03020 	mov	r3, #32
 and r2,r2,r3
    8100:	e0022003 	and	r2, r2, r3
 mov r3,#RPI_ARMTIMER_CTRL_PRESCALE_256
    8104:	e3a03008 	mov	r3, #8
 and r2,r2,r3
    8108:	e0022003 	and	r2, r2, r3
 str r2,[r0,r1]
    810c:	e7802001 	str	r2, [r0, r1]
 
/* enable interrupts in the cpsr registry */
bl _enable_interrupts
    8110:	eb000020 	bl	8198 <_enable_interrupts>

00008114 <infinite_loop>:


/* loop here for ever!  */
infinite_loop:
b infinite_loop
    8114:	eafffffe 	b	8114 <infinite_loop>

00008118 <interrupt_vector>:


  
@------------------------------------------------------------------------------
interrupt_vector: 
        sub     sp, sp, #28      @ space for saving regs
    8118:	e24dd01c 	sub	sp, sp, #28
                                @ (keeping 8-byte sp align)
        str     r3, [sp, #4]     @ save r3
    811c:	e58d3004 	str	r3, [sp, #4]
        str     r4, [sp, #8]     @ save r4
    8120:	e58d4008 	str	r4, [sp, #8]
        str     r5, [sp, #12]     @      r5
    8124:	e58d500c 	str	r5, [sp, #12]
        str     r6, [sp, #16]     @      r6
    8128:	e58d6010 	str	r6, [sp, #16]
        str     fp, [sp, #20]    @      fp
    812c:	e58db014 	str	fp, [sp, #20]
        str     lr, [sp, #24]    @      lr
    8130:	e58de018 	str	lr, [sp, #24]
        add     fp, sp, #24      @ set our frame pointer
    8134:	e28db018 	add	fp, sp, #24
   
  ldr r0, =LED_ON_FLAG_ADDRESS
    8138:	e59f0c0c 	ldr	r0, [pc, #3084]	; 8d4c <exc_stack+0x14>

  ldr r1,[r0]
    813c:	e5901000 	ldr	r1, [r0]
  mov r2,#1
    8140:	e3a02001 	mov	r2, #1
  cmp r1,r2
    8144:	e1510002 	cmp	r1, r2
  bne turnOffLED
    8148:	1a000005 	bne	8164 <turnOffLED>

  mov r2,#0           @ reset the LED_FLAG_ADDRESS = 0
    814c:	e3a02000 	mov	r2, #0
  str r2,[r0]
    8150:	e5802000 	str	r2, [r0]
  
  @TURN ON pin21 LED
  mov r0, #21
    8154:	e3a00015 	mov	r0, #21
  ldr r1, =GPSET0
    8158:	e59f1be8 	ldr	r1, [pc, #3048]	; 8d48 <exc_stack+0x10>
  bl      set_GPSET
    815c:	eb000070 	bl	8324 <set_GPSET>
  b toExitFunction
    8160:	ea000004 	b	8178 <toExitFunction>

00008164 <turnOffLED>:

turnOffLED:

  mov r2,#1           @ reset the LED_FLAG_ADDRESS = 1
    8164:	e3a02001 	mov	r2, #1
  str r2,[r0]
    8168:	e5802000 	str	r2, [r0]

  @TURN OFF pin21 LED
  mov r0, #21
    816c:	e3a00015 	mov	r0, #21
  ldr r1, =GPCLR0
    8170:	e59f1bd8 	ldr	r1, [pc, #3032]	; 8d50 <exc_stack+0x18>
  bl      set_GPSET
    8174:	eb00006a 	bl	8324 <set_GPSET>

00008178 <toExitFunction>:
  
toExitFunction:

        ldr     r3, [sp, #4]     @ restore r3
    8178:	e59d3004 	ldr	r3, [sp, #4]
        ldr     r4, [sp, #8]     @ restore r4
    817c:	e59d4008 	ldr	r4, [sp, #8]
        ldr     r5, [sp, #12]    @      r5
    8180:	e59d500c 	ldr	r5, [sp, #12]
        ldr     r6, [sp, #16]    @      r6
    8184:	e59d6010 	ldr	r6, [sp, #16]
        ldr     fp, [sp, #20]    @      fp
    8188:	e59db014 	ldr	fp, [sp, #20]
        ldr     lr, [sp, #24]    @      lr
    818c:	e59de018 	ldr	lr, [sp, #24]
        add     sp, sp, #28      @      sp
    8190:	e28dd01c 	add	sp, sp, #28
        bx      lr               @ return
    8194:	e12fff1e 	bx	lr

00008198 <_enable_interrupts>:
        @ ------------------- end of function _interrupt_vector_h
@------------------------------------------------------------------------------

_enable_interrupts:
    mrs     r0, cpsr
    8198:	e10f0000 	mrs	r0, CPSR
    bic     r0, r0, #0x80
    819c:	e3c00080 	bic	r0, r0, #128	; 0x80
    msr     cpsr_c, r0
    81a0:	e121f000 	msr	CPSR_c, r0

    mov     pc, lr
    81a4:	e1a0f00e 	mov	pc, lr

000081a8 <_stewart>:

@------------------     
@Start label
@------------------
_stewart:
    ldr sp, =exc_stack
    81a8:	e59fdb88 	ldr	sp, [pc, #2952]	; 8d38 <exc_stack>
    ldr r0, =STACK_SIZE
    81ac:	e3a00b02 	mov	r0, #2048	; 0x800
    add sp, sp, r0
    81b0:	e08dd000 	add	sp, sp, r0
    
push   {r11, lr}    /* Start of the prologue. Saving Frame Pointer and LR onto the stack */
    81b4:	e92d4800 	push	{fp, lr}
add    r11, sp, #0  /* Setting up the bottom of the stack frame */
    81b8:	e28db000 	add	fp, sp, #0
sub    sp, sp, #16  /* End of the prologue. Allocating some buffer on the stack */
    81bc:	e24dd010 	sub	sp, sp, #16
    
    
@------------------
@load register with BASE
@------------------
ldr r6,=BASE
    81c0:	e59f6b8c 	ldr	r6, [pc, #2956]	; 8d54 <exc_stack+0x1c>
@------------------
@Load register with WAIT_CYCLES
@------------------

mov r0, #21
    81c4:	e3a00015 	mov	r0, #21
ldr r1, =FSEL_PIN_AS_OUTPUT
    81c8:	e3a01001 	mov	r1, #1
bl      set_GPFSEL
    81cc:	eb000032 	bl	829c <set_GPFSEL>

mov r0, #21
    81d0:	e3a00015 	mov	r0, #21
ldr r1, =GPSET0
    81d4:	e3a0101c 	mov	r1, #28
bl      set_GPSET
    81d8:	eb000051 	bl	8324 <set_GPSET>

mov r0, #12
    81dc:	e3a0000c 	mov	r0, #12
bl      set_gpio_high_forInput
    81e0:	eb0000b2 	bl	84b0 <set_gpio_high_forInput>
@bl      set_gpio_pin_12_input
		

@Load register with COUNTER
@------------------
ldr r2,=COUNTER
    81e4:	e3a0280f 	mov	r2, #983040	; 0xf0000
ldr r6,=BASE
    81e8:	e59f6b64 	ldr	r6, [pc, #2916]	; 8d54 <exc_stack+0x1c>

000081ec <Infinite_loop>:
        @AND r4, r3, r1
        @cmp r4, r1
        @bne buttonPressed
        
        
        mov r0, #12
    81ec:	e3a0000c 	mov	r0, #12
        bl      read_GPLEV @ returns r0=1 if pin high OR r0=0 pin low
    81f0:	eb000065 	bl	838c <read_GPLEV>
        mov r1, #0
    81f4:	e3a01000 	mov	r1, #0
        cmp r0, r1
    81f8:	e1500001 	cmp	r0, r1
        beq buttonPressed  @ branch if button is pressed
    81fc:	0a000006 	beq	821c <buttonPressed>

	@TURN ON pin21 LED
	mov r0, #21
    8200:	e3a00015 	mov	r0, #21
        ldr r1, =GPSET0
    8204:	e3a0101c 	mov	r1, #28
        bl      set_GPSET
    8208:	eb000045 	bl	8324 <set_GPSET>


	@DELAY
	mov r5,#0
    820c:	e3a05000 	mov	r5, #0

00008210 <delay>:
	delay:@loop to large number
		add r5,r5,#1
    8210:	e2855001 	add	r5, r5, #1
		cmp r5,r2	
    8214:	e1550002 	cmp	r5, r2
		bne delay
    8218:	1afffffc 	bne	8210 <delay>

0000821c <buttonPressed>:
		
buttonPressed:
	@TURN OFF pin21 LED
	mov r0, #21
    821c:	e3a00015 	mov	r0, #21
        ldr r1, =GPCLR0
    8220:	e3a01028 	mov	r1, #40	; 0x28
        bl      set_GPSET
    8224:	eb00003e 	bl	8324 <set_GPSET>
        
	@DELAY2
	mov r5,#0
    8228:	e3a05000 	mov	r5, #0

0000822c <delay2>:
	delay2:
		add r5,r5,#1
    822c:	e2855001 	add	r5, r5, #1
		cmp r5,r2	
    8230:	e1550002 	cmp	r5, r2
		bne delay2
    8234:	1afffffc 	bne	822c <delay2>
b Infinite_loop
    8238:	eaffffeb 	b	81ec <Infinite_loop>

0000823c <divide_int>:
    @ -------- Output 
    @ -------- r0  quotient
    @ -------- r1  remainder
    @ ---------    Where   dividend/divisor = quotient and remainder
divide_int:  
        sub     sp, sp, #28      @ space for saving regs
    823c:	e24dd01c 	sub	sp, sp, #28
                                @ (keeping 8-byte sp align)
        str     r3, [sp, #4]     @ save r3
    8240:	e58d3004 	str	r3, [sp, #4]
        str     r4, [sp, #8]     @ save r4
    8244:	e58d4008 	str	r4, [sp, #8]
        str     r5, [sp, #12]     @      r5
    8248:	e58d500c 	str	r5, [sp, #12]
        str     r6, [sp, #16]     @      r6
    824c:	e58d6010 	str	r6, [sp, #16]
        str     fp, [sp, #20]    @      fp
    8250:	e58db014 	str	fp, [sp, #20]
        str     lr, [sp, #24]    @      lr
    8254:	e58de018 	str	lr, [sp, #24]
        add     fp, sp, #24      @ set our frame pointer
    8258:	e28db018 	add	fp, sp, #24

    mov   r3, r1   @ move divisor to r3
    825c:	e1a03001 	mov	r3, r1
    mov   r1, r0   @ move dividend to r1       
    8260:	e1a01000 	mov	r1, r0
    mov   r0, #0   @ set the quotient count to zero
    8264:	e3a00000 	mov	r0, #0

00008268 <continue>:
    
continue:             @ loop subracting divisor from dividend
    cmp   r1, r3
    8268:	e1510003 	cmp	r1, r3
    blt   done        @ when remainder is less than divisor we are done
    826c:	ba000002 	blt	827c <done>
    add   r0, r0, #1
    8270:	e2800001 	add	r0, r0, #1
    sub   r1, r1, r3 @ count how many time be subracted the divisor
    8274:	e0411003 	sub	r1, r1, r3
    b     continue
    8278:	eafffffa 	b	8268 <continue>

0000827c <done>:
done:

        ldr     r3, [sp, #4]     @ restore r3
    827c:	e59d3004 	ldr	r3, [sp, #4]
        ldr     r4, [sp, #8]     @ restore r4
    8280:	e59d4008 	ldr	r4, [sp, #8]
        ldr     r5, [sp, #12]    @      r5
    8284:	e59d500c 	ldr	r5, [sp, #12]
        ldr     r6, [sp, #16]    @      r6
    8288:	e59d6010 	ldr	r6, [sp, #16]
        ldr     fp, [sp, #20]    @      fp
    828c:	e59db014 	ldr	fp, [sp, #20]
        ldr     lr, [sp, #24]    @      lr
    8290:	e59de018 	ldr	lr, [sp, #24]
        add     sp, sp, #28      @      sp
    8294:	e28dd01c 	add	sp, sp, #28
        bx      lr               @ return    @ ------------------- end of function divide_int
    8298:	e12fff1e 	bx	lr

0000829c <set_GPFSEL>:
    @ -------- param r1 = GPFSEL flag (000=input, 001=output)
    .equ   NUM_PIN_IN_SEL, 10  @ constant: number of pins in a select register
    .equ   NUM_PIN_IN_SEL, 10  @ constant: number of pins in a select register

set_GPFSEL:
        sub     sp, sp, #32      @ space for saving regs
    829c:	e24dd020 	sub	sp, sp, #32
                                @ (keeping 8-byte sp align)
        str     r3, [sp, #4]     @ save r3
    82a0:	e58d3004 	str	r3, [sp, #4]
        str     r4, [sp, #8]     @ save r4
    82a4:	e58d4008 	str	r4, [sp, #8]
        str     r5, [sp, #12]    @      r5
    82a8:	e58d500c 	str	r5, [sp, #12]
        str     r6, [sp, #16]    @      r6
    82ac:	e58d6010 	str	r6, [sp, #16]
        str     r7, [sp, #20]    @      r7
    82b0:	e58d7014 	str	r7, [sp, #20]
        str     fp, [sp, #24]    @      fp
    82b4:	e58db018 	str	fp, [sp, #24]
        str     lr, [sp, #28]    @      lr
    82b8:	e58de01c 	str	lr, [sp, #28]
        add     fp, sp, #28      @ set our frame pointer
    82bc:	e28db01c 	add	fp, sp, #28

    mov r7, r1           @ backup the GPFSEL flag to r4
    82c0:	e1a07001 	mov	r7, r1

    mov r1, #NUM_PIN_IN_SEL
    82c4:	e3a0100a 	mov	r1, #10
    bl  divide_int
    82c8:	ebffffdb 	bl	823c <divide_int>

    lsl r0,r0,#2     @ multiple offset by 4, 4 bytes per offset
    82cc:	e1a00100 	lsl	r0, r0, #2

    mov r3, r1       @ need to multiply (remainder) pin
    82d0:	e1a03001 	mov	r3, r1
    add r1, r1, r3, lsl #1 @ position by 3
    82d4:	e0811083 	add	r1, r1, r3, lsl #1
    
    @Set bit 3 in GPFSEL
    @------------------
    ldr r6,=BASE
    82d8:	e59f6a74 	ldr	r6, [pc, #2676]	; 8d54 <exc_stack+0x1c>
    ldr r5,=EOR_MASK
    82dc:	e3e05000 	mvn	r5, #0
    mov r4, #7
    82e0:	e3a04007 	mov	r4, #7
    lsl r4,r4,r1
    82e4:	e1a04114 	lsl	r4, r4, r1
    eor r4,r4,r5
    82e8:	e0244005 	eor	r4, r4, r5
    ldr r5,[r6,r0]
    82ec:	e7965000 	ldr	r5, [r6, r0]
    and r5,r5,r4
    82f0:	e0055004 	and	r5, r5, r4
    
    lsl r7,r7,r1    @ shift the flags their pin position
    82f4:	e1a07117 	lsl	r7, r7, r1
    orr r5,r5,r7
    82f8:	e1855007 	orr	r5, r5, r7
    
    str r5,[r6,r0]
    82fc:	e7865000 	str	r5, [r6, r0]
    @-------------------
    
        ldr     r3, [sp, #4]     @ restore r3
    8300:	e59d3004 	ldr	r3, [sp, #4]
        ldr     r4, [sp, #8]     @ restore r4
    8304:	e59d4008 	ldr	r4, [sp, #8]
        ldr     r5, [sp, #12]    @      r5
    8308:	e59d500c 	ldr	r5, [sp, #12]
        ldr     r6, [sp, #16]    @      r6
    830c:	e59d6010 	ldr	r6, [sp, #16]
        ldr     r7, [sp, #20]    @      r7
    8310:	e59d7014 	ldr	r7, [sp, #20]
        ldr     fp, [sp, #24]    @      fp
    8314:	e59db018 	ldr	fp, [sp, #24]
        ldr     lr, [sp, #28]    @      lr
    8318:	e59de01c 	ldr	lr, [sp, #28]
        add     sp, sp, #32      @      sp
    831c:	e28dd020 	add	sp, sp, #32
        bx      lr              @ return 
    8320:	e12fff1e 	bx	lr

00008324 <set_GPSET>:
    @ ------------------- function: function set_GPSET
    @ -------- param r0 = gpio pin #
    @ -------- param r1 = The GPSET0 or GPCLR0 register address
    .equ   NUM_PIN_IN_GPSET, 32  @ constant: number of pins in a GPSET register
set_GPSET:
        sub     sp, sp, #28      @ space for saving regs
    8324:	e24dd01c 	sub	sp, sp, #28
                                @ (keeping 8-byte sp align)
        str     r3, [sp, #4]     @ save r3
    8328:	e58d3004 	str	r3, [sp, #4]
        str     r4, [sp, #8]     @ save r4
    832c:	e58d4008 	str	r4, [sp, #8]
        str     r5, [sp, #12]    @      r5
    8330:	e58d500c 	str	r5, [sp, #12]
        str     r6, [sp, #16]    @      r6
    8334:	e58d6010 	str	r6, [sp, #16]
        str     fp, [sp, #20]    @      fp
    8338:	e58db014 	str	fp, [sp, #20]
        str     lr, [sp, #24]    @      lr
    833c:	e58de018 	str	lr, [sp, #24]
        add     fp, sp, #24      @ set our frame pointer
    8340:	e28db018 	add	fp, sp, #24



    mov r4, r0           @ backup pin # to r4
    8344:	e1a04000 	mov	r4, r0
    mov r5, r1           @ backup The GPSET0 or GPCLR0 register address to r5
    8348:	e1a05001 	mov	r5, r1

    mov r1, #NUM_PIN_IN_GPSET
    834c:	e3a01020 	mov	r1, #32
    bl  divide_int
    8350:	ebffffb9 	bl	823c <divide_int>

    lsl r0,r0,#2     @ multiple offset by 4, 4 bytes per offset
    8354:	e1a00100 	lsl	r0, r0, #2

    
    @Set bit 3 in GPSET0
    @------------------
    ldr r6,=BASE
    8358:	e59f69f4 	ldr	r6, [pc, #2548]	; 8d54 <exc_stack+0x1c>
    add r6,r6,r5 
    835c:	e0866005 	add	r6, r6, r5
    mov r4, #1
    8360:	e3a04001 	mov	r4, #1
    lsl r4,r4,r1
    8364:	e1a04114 	lsl	r4, r4, r1
@    ldr r5,[r6,r0]
@    orr r5,r5,r4
    str r4,[r6,r0]
    8368:	e7864000 	str	r4, [r6, r0]
    @-------------------
 
 
        ldr     r3, [sp, #4]     @ restore r4
    836c:	e59d3004 	ldr	r3, [sp, #4]
        ldr     r4, [sp, #8]     @ restore r4
    8370:	e59d4008 	ldr	r4, [sp, #8]
        ldr     r5, [sp, #12]    @      r5
    8374:	e59d500c 	ldr	r5, [sp, #12]
        ldr     r6, [sp, #16]    @      r6
    8378:	e59d6010 	ldr	r6, [sp, #16]
        ldr     fp, [sp, #20]    @      fp
    837c:	e59db014 	ldr	fp, [sp, #20]
        ldr     lr, [sp, #24]    @      lr
    8380:	e59de018 	ldr	lr, [sp, #24]
        add     sp, sp, #28      @      sp
    8384:	e28dd01c 	add	sp, sp, #28
        bx      lr              @ return 
    8388:	e12fff1e 	bx	lr

0000838c <read_GPLEV>:
    @ -------- param r0 = gpio pin #
    @ -------- return
    @            r0 = 0 if input is low
    @            r0 = 1 if input is high
read_GPLEV:
        sub     sp, sp, #28      @ space for saving regs
    838c:	e24dd01c 	sub	sp, sp, #28
                                 @ (keeping 8-byte sp align)
        str     r3, [sp, #4]     @ save r3
    8390:	e58d3004 	str	r3, [sp, #4]
        str     r4, [sp, #8]     @ save r4
    8394:	e58d4008 	str	r4, [sp, #8]
        str     r5, [sp, #12]    @      r5
    8398:	e58d500c 	str	r5, [sp, #12]
        str     r6, [sp, #16]    @      r6
    839c:	e58d6010 	str	r6, [sp, #16]
        str     fp, [sp, #20]    @      fp
    83a0:	e58db014 	str	fp, [sp, #20]
        str     lr, [sp, #24]    @      lr
    83a4:	e58de018 	str	lr, [sp, #24]
        add     fp, sp, #24      @ set our frame pointer
    83a8:	e28db018 	add	fp, sp, #24



    mov r4, r0           @ backup pin # to r4
    83ac:	e1a04000 	mov	r4, r0
    mov r5, r1           @ backup The GPSET0 or GPCLR0 register address to r5
    83b0:	e1a05001 	mov	r5, r1

    mov r1, #NUM_PIN_IN_GPSET
    83b4:	e3a01020 	mov	r1, #32
    bl  divide_int
    83b8:	ebffff9f 	bl	823c <divide_int>

    lsl r0,r0,#2     @ multiple offset by 4, 4 bytes per offset
    83bc:	e1a00100 	lsl	r0, r0, #2

    
    @Set bit 3 in GPSET0
    @------------------
    ldr r6,=BASE
    83c0:	e59f698c 	ldr	r6, [pc, #2444]	; 8d54 <exc_stack+0x1c>
    ldr r5,=GPLEV0
    83c4:	e3a05034 	mov	r5, #52	; 0x34
    add r6,r6,r5 
    83c8:	e0866005 	add	r6, r6, r5
    mov r4, #1
    83cc:	e3a04001 	mov	r4, #1
    lsl r4,r4,r1
    83d0:	e1a04114 	lsl	r4, r4, r1
    ldr r5,[r6,r0]
    83d4:	e7965000 	ldr	r5, [r6, r0]
    AND r5, r5, r4
    83d8:	e0055004 	and	r5, r5, r4
    cmp r5, r4
    83dc:	e1550004 	cmp	r5, r4
    bne pinLow  @ pinLow = button being pressed
    83e0:	1a000001 	bne	83ec <pinLow>
    mov r0,#1
    83e4:	e3a00001 	mov	r0, #1
    b exitDone
    83e8:	ea000000 	b	83f0 <exitDone>

000083ec <pinLow>:
pinLow:
    mov r0,#0
    83ec:	e3a00000 	mov	r0, #0

000083f0 <exitDone>:
exitDone:
    @-------------------
 
 
        ldr     r3, [sp, #4]     @ restore r4
    83f0:	e59d3004 	ldr	r3, [sp, #4]
        ldr     r4, [sp, #8]     @ restore r4
    83f4:	e59d4008 	ldr	r4, [sp, #8]
        ldr     r5, [sp, #12]    @      r5
    83f8:	e59d500c 	ldr	r5, [sp, #12]
        ldr     r6, [sp, #16]    @      r6
    83fc:	e59d6010 	ldr	r6, [sp, #16]
        ldr     fp, [sp, #20]    @      fp
    8400:	e59db014 	ldr	fp, [sp, #20]
        ldr     lr, [sp, #24]    @      lr
    8404:	e59de018 	ldr	lr, [sp, #24]
        add     sp, sp, #28      @      sp
    8408:	e28dd01c 	add	sp, sp, #28
        bx      lr              @ return 
    840c:	e12fff1e 	bx	lr

00008410 <set_GPPUD>:
    @ ------------------- function: function set_GPPUD
    @ -------- param r0 = GPPUD flag
    .equ   NUM_PIN_IN_GPSET, 32  @ constant: number of pins in a GPSET register
set_GPPUD:

    ldr r6,=BASE
    8410:	e59f693c 	ldr	r6, [pc, #2364]	; 8d54 <exc_stack+0x1c>
    str r0,[r6,#GPPUD] @- str 0x00,[BASE + 0x04] where [0x180ac + 0x04] = 180B0
    8414:	e5860094 	str	r0, [r6, #148]	; 0x94

    bx      lr              @ return 
    8418:	e12fff1e 	bx	lr

0000841c <wait_cycles>:

 @----------------------------------------------------------------------------------------------
    @ ------------------- function: function wait_cycles
    @ -------- param r0 = wait cycles
wait_cycles:
        sub     sp, sp, #12      @ space for saving regs
    841c:	e24dd00c 	sub	sp, sp, #12
                                @ (keeping 8-byte sp align)
        str     r1, [sp, #4]     @ save r1
    8420:	e58d1004 	str	r1, [sp, #4]
        str     r2, [sp, #8]     @ save r2
    8424:	e58d2008 	str	r2, [sp, #8]
        add     fp, sp, #8      @ set our frame pointer
    8428:	e28db008 	add	fp, sp, #8

        mov     r1,#0
    842c:	e3a01000 	mov	r1, #0

00008430 <repeat>:

        repeat:@loop to large number
		add r1,r1,#1
    8430:	e2811001 	add	r1, r1, #1
		cmp r0,r1	
    8434:	e1500001 	cmp	r0, r1
		bne repeat
    8438:	1afffffc 	bne	8430 <repeat>
 
        ldr     r1, [sp, #4]     @ restore r1
    843c:	e59d1004 	ldr	r1, [sp, #4]
        ldr     r2, [sp, #8]     @ restore r2
    8440:	e59d2008 	ldr	r2, [sp, #8]
        add     sp, sp, #12      @      sp
    8444:	e28dd00c 	add	sp, sp, #12
        bx      lr              @ return 
    8448:	e12fff1e 	bx	lr

0000844c <set_GPPUDCLK>:
    @ -------- param r1 = the flag:
    @                1 - set
    @                0 - clear
    .equ   NUM_PIN_IN_GPSET, 32  @ constant: number of pins in a GPSET register
set_GPPUDCLK:
        sub     sp, sp, #28      @ space for saving regs
    844c:	e24dd01c 	sub	sp, sp, #28
                                @ (keeping 8-byte sp align)
        str     r1, [sp, #4]     @ save r1
    8450:	e58d1004 	str	r1, [sp, #4]
        str     r4, [sp, #8]     @ save r4
    8454:	e58d4008 	str	r4, [sp, #8]
        str     r5, [sp, #12]    @      r5
    8458:	e58d500c 	str	r5, [sp, #12]
        str     r6, [sp, #16]    @      r6
    845c:	e58d6010 	str	r6, [sp, #16]
        str     fp, [sp, #20]    @      fp
    8460:	e58db014 	str	fp, [sp, #20]
        str     lr, [sp, #24]    @      lr
    8464:	e58de018 	str	lr, [sp, #24]
        add     fp, sp, #24      @ set our frame pointer
    8468:	e28db018 	add	fp, sp, #24



    mov r4, r1           @ move flag r4
    846c:	e1a04001 	mov	r4, r1

    mov r1, #NUM_PIN_IN_GPSET
    8470:	e3a01020 	mov	r1, #32
    bl  divide_int
    8474:	ebffff70 	bl	823c <divide_int>

    lsl r0,r0,#2     @ multiple offset by 4, 4 bytes per offset
    8478:	e1a00100 	lsl	r0, r0, #2

    
    @Set pin bit in GPPUDCLK0
    @------------------
    ldr r5,=GPPUDCLK0
    847c:	e3a05098 	mov	r5, #152	; 0x98
    ldr r6,=BASE
    8480:	e59f68cc 	ldr	r6, [pc, #2252]	; 8d54 <exc_stack+0x1c>
    add r6,r6,r5 
    8484:	e0866005 	add	r6, r6, r5
    lsl r4,r4,r1
    8488:	e1a04114 	lsl	r4, r4, r1
    str r4,[r6,r0]
    848c:	e7864000 	str	r4, [r6, r0]
    @-------------------
 
 
        ldr     r1, [sp, #4]     @ restore r1
    8490:	e59d1004 	ldr	r1, [sp, #4]
        ldr     r4, [sp, #8]     @ restore r4
    8494:	e59d4008 	ldr	r4, [sp, #8]
        ldr     r5, [sp, #12]    @      r5
    8498:	e59d500c 	ldr	r5, [sp, #12]
        ldr     r6, [sp, #16]    @      r6
    849c:	e59d6010 	ldr	r6, [sp, #16]
        ldr     fp, [sp, #20]    @      fp
    84a0:	e59db014 	ldr	fp, [sp, #20]
        ldr     lr, [sp, #24]    @      lr
    84a4:	e59de018 	ldr	lr, [sp, #24]
        add     sp, sp, #28      @      sp
    84a8:	e28dd01c 	add	sp, sp, #28
        bx      lr              @ return 
    84ac:	e12fff1e 	bx	lr

000084b0 <set_gpio_high_forInput>:

@----------------------------------------------------------------------------------------------
    @ ------------------- function: function set_gpio_high_forInput
    @ -------- param r0 = gpio pin #
set_gpio_high_forInput:
        sub     sp, sp, #28      @ space for saving regs
    84b0:	e24dd01c 	sub	sp, sp, #28
                                 @ (keeping 8-byte sp align)
        str     r3, [sp, #4]     @ save r3
    84b4:	e58d3004 	str	r3, [sp, #4]
        str     r4, [sp, #8]     @ save r4
    84b8:	e58d4008 	str	r4, [sp, #8]
        str     r5, [sp, #12]    @      r5
    84bc:	e58d500c 	str	r5, [sp, #12]
        str     r6, [sp, #16]    @      r6
    84c0:	e58d6010 	str	r6, [sp, #16]
        str     fp, [sp, #20]    @      fp
    84c4:	e58db014 	str	fp, [sp, #20]
        str     lr, [sp, #24]    @      lr
    84c8:	e58de018 	str	lr, [sp, #24]
        add     fp, sp, #24      @ set our frame pointer
    84cc:	e28db018 	add	fp, sp, #24

    mov r3,r0      @- backup pin#
    84d0:	e1a03000 	mov	r3, r0

    ldr r1,=FSEL_PIN_AS_INPUT
    84d4:	e3a01000 	mov	r1, #0
    bl   set_GPFSEL
    84d8:	ebffff6f 	bl	829c <set_GPFSEL>
    

    ldr r0,=GPPUD_ENABLE_PULL_UP_CONTROL
    84dc:	e3a00002 	mov	r0, #2
    bl   set_GPPUD
    84e0:	ebffffca 	bl	8410 <set_GPPUD>
    
    ldr r0,=WAIT_CYCLES
    84e4:	e3a00096 	mov	r0, #150	; 0x96
    bl   wait_cycles
    84e8:	ebffffcb 	bl	841c <wait_cycles>
    
    mov r0,r3    
    84ec:	e1a00003 	mov	r0, r3
    ldr r1,=GPPUDCLK_SET
    84f0:	e3a01001 	mov	r1, #1
    bl   set_GPPUDCLK
    84f4:	ebffffd4 	bl	844c <set_GPPUDCLK>
    
    ldr r0,=WAIT_CYCLES
    84f8:	e3a00096 	mov	r0, #150	; 0x96
    bl   wait_cycles
    84fc:	ebffffc6 	bl	841c <wait_cycles>

    @mov r0,r3    
    ldr r0,=GPPUD_CLEAR
    8500:	e3a00000 	mov	r0, #0
    bl   set_GPPUD
    8504:	ebffffc1 	bl	8410 <set_GPPUD>

    mov r0,r3    
    8508:	e1a00003 	mov	r0, r3
    ldr r1,=GPPUDCLK_CLEAR
    850c:	e3a01000 	mov	r1, #0
    bl   set_GPPUDCLK
    8510:	ebffffcd 	bl	844c <set_GPPUDCLK>
 
        ldr     r3, [sp, #4]     @ restore r4
    8514:	e59d3004 	ldr	r3, [sp, #4]
        ldr     r4, [sp, #8]     @ restore r4
    8518:	e59d4008 	ldr	r4, [sp, #8]
        ldr     r5, [sp, #12]    @      r5
    851c:	e59d500c 	ldr	r5, [sp, #12]
        ldr     r6, [sp, #16]    @      r6
    8520:	e59d6010 	ldr	r6, [sp, #16]
        ldr     fp, [sp, #20]    @      fp
    8524:	e59db014 	ldr	fp, [sp, #20]
        ldr     lr, [sp, #24]    @      lr
    8528:	e59de018 	ldr	lr, [sp, #24]
        add     sp, sp, #28      @      sp
    852c:	e28dd01c 	add	sp, sp, #28
        bx      lr              @ return 
    8530:	e12fff1e 	bx	lr

00008534 <XLED_ON_FLAG_ADDRESS>:
    8534:	00018d58 	.word	0x00018d58
	...

00008d38 <exc_stack>:
    ldr sp, =exc_stack
    8d38:	00008d38 	.word	0x00008d38
    ldr r0, =STACK_SIZE_2
    8d3c:	00000400 	.word	0x00000400
    ldr r0, =STACK_SIZE
    8d40:	00000800 	.word	0x00000800
ldr r1, =FSEL_PIN_AS_OUTPUT
    8d44:	00000001 	.word	0x00000001
ldr r1, =GPSET0
    8d48:	0000001c 	.word	0x0000001c
  ldr r0, =LED_ON_FLAG_ADDRESS
    8d4c:	00018d58 	.word	0x00018d58
  ldr r1, =GPCLR0
    8d50:	00000028 	.word	0x00000028
ldr r6,=BASE
    8d54:	3f200000 	.word	0x3f200000
