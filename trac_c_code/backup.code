    char buf_func[CTRACE_BUF_LEN+1] = {0};
    char buf_file[CTRACE_BUF_LEN+1] = {0}; 
    char buf_args[ARG_BUF_LEN + 1] = {0}; 
    pthread_t self = (pthread_t)0;
    int *frame = NULL;
    int *frame1 = NULL;
    int nargs = 0;
    int isCPP = 0;
    int thisPointer = 0;
    

    
    self = pthread_self(); 
    frame = (int *)__builtin_frame_address(0); /*of the 'func'*/
    thisPointer = *(frame+6);
    
    frame = (int *)__builtin_frame_address(1); /*of the 'func'*/
    
    assert(frame != NULL); 
    
    /* Function Entry Address */
    
    /*Which function*/
    libtrace_resolve (func, buf_func, CTRACE_BUF_LEN, NULL, 0);
    /*From where*/
    libtrace_resolve (callsite, NULL, 0, buf_file, CTRACE_BUF_LEN);
    nargs = nchr(buf_func, ',') + 1 /*Last arg has no comma after*/; 
    isCPP += is_cpp(buf_func);      /*'this'*/
    
    string objectName;
    string functionName;
    string functionFullName(buf_func);
    int pos = functionFullName.find("::");
    
    if ( pos > 0 )
    {
       objectName   = functionFullName.substr(0, pos);
       functionName = functionFullName.substr(pos+2, functionFullName.length());
    }
    else
    {
       functionName = functionFullName;
    }
    
    string objectInstance = str( boost::format("%s(%p)") % objectName % thisPointer );

    if ( !functionStack.empty() )
    {
       string lastOjectInstance = functionStack.top();

       string sequenceUML = str( boost::format("%s -> %s: %s\n") % lastOjectInstance % objectInstance % functionName );
       printf("**************************\n\n");
       printf("%s", sequenceUML.c_str()); 
       printf("\n\n");
    
    }
    else
    {
       printf("**************************\n\n");
       printf("First Main entry"); 
       printf("\n\n");
    }


    printf("functionStack.push() ------>   objectInstance =%s\n", objectInstance.c_str()); 
    printf("functionStack.size() =%i\n", functionStack.size()); 
    functionStack.push(objectInstance);


    if (isCPP > 0 )
    {
        nargs += isCPP;  
    }
    else
    {
        thisPointer = 0;
    }
    
    // Main -> B(1234234) bf1(int)
    // B(1234234) -> C(1324123) cf1(int)
    // Main -> B(1234234) m2(int)
    
    
    
    if (nargs > MAX_ARG_SHOW)
        nargs = MAX_ARG_SHOW;

    printf("T%p: %p %s this=%p %s [from %s]\n", 
           self, (int*)func, buf_func,  thisPointer,
           args(buf_args, ARG_BUF_LEN, nargs, frame), 
           buf_file);
    
    /*print_stack(); */
