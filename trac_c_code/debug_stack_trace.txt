172	    frame = (int *)__builtin_frame_address(0); /*of the 'func'*/
(gdb) n
173	    frame = (int *)__builtin_frame_address(1); /*of the 'func'*/
(gdb) p frame
$1 = (int *) 0x7fffffffda60
(gdb) n
175	    assert(frame != NULL); 
(gdb) p frame
$2 = (int *) 0x7fffffffdab0


=> 0x0000000000401260 <+93>:	pushq  $0xc
   0x0000000000401262 <+95>:	pushq  $0xb
   0x0000000000401264 <+97>:	pushq  $0xa
   0x0000000000401266 <+99>:	pushq  $0x9
   0x0000000000401268 <+101>:	pushq  $0x8
   0x000000000040126a <+103>:	pushq  $0x7
   0x000000000040126c <+105>:	mov    $0x6,%r9d
   0x0000000000401272 <+111>:	mov    $0x5,%r8d
   0x0000000000401278 <+117>:	mov    $0x4,%ecx
   0x000000000040127d <+122>:	mov    $0x3,%edx
   0x0000000000401282 <+127>:	mov    $0x2,%esi
   0x0000000000401287 <+132>:	mov    $0x1,%edi
   0x000000000040128c <+137>:	callq  0x400fcb <f5(int, int, int, int, int, int, int, int, int, int, int, int)>
   0x0000000000401291 <+142>:	add    $0x30,%rsp
   
   (gdb) disas 0x00400ff9
Dump of assembler code for function f5(int, int, int, int, int, int, int, int, int, int, int, int):
   0x0000000000400fcb <+0>:	push   %rbp
   0x0000000000400fcc <+1>:	mov    %rsp,%rbp
   0x0000000000400fcf <+4>:	push   %rbx
   0x0000000000400fd0 <+5>:	sub    $0x38,%rsp
   0x0000000000400fd4 <+9>:	mov    %edi,-0x24(%rbp)
   0x0000000000400fd7 <+12>:	mov    %esi,-0x28(%rbp)
   0x0000000000400fda <+15>:	mov    %edx,-0x2c(%rbp)
   0x0000000000400fdd <+18>:	mov    %ecx,-0x30(%rbp)
   0x0000000000400fe0 <+21>:	mov    %r8d,-0x34(%rbp)
   0x0000000000400fe4 <+25>:	mov    %r9d,-0x38(%rbp)
   0x0000000000400fe8 <+29>:	mov    0x8(%rbp),%rax
   0x0000000000400fec <+33>:	mov    %rax,%rsi
   0x0000000000400fef <+36>:	mov    $0x400fcb,%edi
   0x0000000000400ff4 <+41>:	callq  0x400c60 <__cyg_profile_func_enter@plt>


---Type <return> to continue, or q <return> to quit---q
Quit
(gdb) i r
rax            0x5a	90
rbx            0x0	0
rcx            0x7fffffa7	2147483559
rdx            0x0	0
rsi            0x0	0
rdi            0x7fffffffd5c0	140737488344512
rbp            0x7fffffffdb20	0x7fffffffdb20
rsp            0x7fffffffdaf0	0x7fffffffdaf0
r8             0x0	0
r9             0x5a	90
r10            0x0	0
r11            0x246	582
r12            0x400ce0	4197600
r13            0x7fffffffdc00	140737488346112
r14            0x0	0
r15            0x0	0
rip            0x401260	0x401260 <main(int, char**)+93>
eflags         0x206	[ PF IF ]
cs             0x33	51
ss             0x2b	43
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
(gdb) 
172	    frame = (int *)__builtin_frame_address(0); /*of the 'func'*/
(gdb) p frame
$8 = (int *) 0x7fffffffda60
173	    frame = (int *)__builtin_frame_address(1); /*of the 'func'*/
(gdb) n
175	    assert(frame != NULL); 
(gdb) p frame
$9 = (int *) 0x7fffffffdab0

0x7fffffffda00:	0x00000000	0x00000000	0x00000000	0x00000000
0x7fffffffda10:	0x00000000	0x00000000	0x00000000	0x00000000
0x7fffffffda20:	0x00000000	0x00000000	0x00000000	0x00000000
0x7fffffffda30:	0x00000000	0x00000000	0x00000000	0x00000000
0x7fffffffda40:	0x00000000	0x00000000	0x00000000	0x00000000
0x7fffffffda50:	0x00000000	0x00000000	0x1bfbda00	0xd4aea69b

frame(0) =  0x7fffffffda60

0x7fffffffda60:	0xffffdab0	0x00007fff	0x00400ff9	0x00000000
0x7fffffffda70:	0x00000000	0x00000000	0x00000006	0x00000005
0x7fffffffda80:	0x00000004	0x00000003	0x00000002	0x00000001
0x7fffffffda90:	0x00000001	0x00000000	0xffffdfb2	0x00007fff
0x7fffffffdaa0:	0x00401651	0x00000000	0x00000000	0x00000000

frame(1) =  0x7fffffffdab0


0x7fffffffdab0:	0xffffdb20	0x00007fff	0x00401291	0x00000000
0x7fffffffdac0:	0x00000007	0x00000000	0x00000008	0x00000000
0x7fffffffdad0:	0x00000009	0x00000000	0x0000000a	0x00000000
0x7fffffffdae0:	0x0000000b	0x00000000	0x0000000c	0x00000000
0x7fffffffdaf0:	0xffffdc08	0x00007fff	0x00000000	0x00000001
0x7fffffffdb00:	0x00401580	0x00000000	0x00400ce0	0x00000000
0x7fffffffdb10:	0x00000000	0x00000000	0x00400ce0	0x00000000
0x7fffffffdb20:	0x00401580	0x00000000	0xf6f07830	0x00007fff
0x7fffffffdb30:	0x00000000	0x00000000	0xffffdc08	0x00007fff
0x7fffffffdb40:	0x00000000	0x00000001	0x00401203	0x00000000
0x7fffffffdb50:	0x00000000	0x00000000	0x25a9c984	0xbc8ecf23
0x7fffffffdb60:	0x00400ce0	0x00000000	0xffffdc00	0x00007fff
0x7fffffffdb70:	0x00000000	0x00000000	0x00000000	0x00000000
0x7fffffffdb80:	0xb8c9c984	0x4371305c	0xe179c984	0x43712243
0x7fffffffdb90:	0x00000000	0x00007fff	0x00000000	0x00000000
0x7fffffffdba0:	0x00000000	0x00000000	0x004015f0	0x00000000
0x7fffffffdbb0:	0xf7de7ab0	0x00007fff	0xf7de77cb	0x00007fff
0x7fffffffdbc0:	0x00000000	0x00000000	0x00000000	0x00000000
0x7fffffffdbd0:	0x00400ce0	0x00000000	0xffffdc00	0x00007fff
0x7fffffffdbe0:	0x00000000	0x00000000	0x00400d09	0x00000000
0x7fffffffdbf0:	0xffffdbf8	0x00007fff	0x0000001c	0x00000000
0x7fffffffdc00:	0x00000001	0x00000000	0xffffdfb2	0x00007fff
0x7fffffffdc10:	0x00000000	0x00000000	0xffffdffe	0x00007fff
0x7fffffffdc20:	0xffffe009	0x00007fff	0xffffe01b	0x00007fff
0x7fffffffdc30:	0xffffe04e	0x00007fff	0xffffe064	0x00007fff
0x7fffffffdc40:	0xffffe073	0x00007fff	0xffffe0a7	0x00007fff
0x7fffffffdc50:	0xffffe0bb	0x00007fff	0xffffe0cc	0x00007fff
0x7fffffffdc60:	0xffffe0e3	0x00007fff	0xffffe0f3	0x00007fff
0x7fffffffdc70:	0xffffe11c	0x00007fff	0xffffe13f	0x00007fff
0x7fffffffdc80:	0xffffe159	0x00007fff	0xffffe16b	0x00007fff
0x7fffffffdc90:	0xffffe1af	0x00007fff	0xffffe1c6	0x00007fff
0x7fffffffdca0:	0xffffe1f3	0x00007fff	0xffffe200	0x00007fff
0x7fffffffdcb0:	0xffffe788	0x00007fff	0xffffe79b	0x00007fff
0x7fffffffdcc0:	0xffffe7d5	0x00007fff	0xffffe809	0x00007fff
0x7fffffffdcd0:	0xffffe832	0x00007fff	0xffffe865	0x00007fff
0x7fffffffdce0:	0xffffe871	0x00007fff	0xffffe8b5	0x00007fff
0x7fffffffdcf0:	0xffffe8cc	0x00007fff	0xffffeafc	0x00007fff
0x7fffffffdd00:	0xffffeb0e	0x00007fff	0xffffeb2f	0x00007fff
0x7fffffffdd10:	0xffffeb3e	0x00007fff	0xffffeb53	0x00007fff



